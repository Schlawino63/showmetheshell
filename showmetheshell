#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;

#use lib "$FindBin::Bin/contrib/reanimator/lib";
use lib "/Users/vti/dev/reanimator/lib";

use lib 'lib';

#use constant DEBUG => !!$ENV{SHOWMETHESHELL_DEBUG};

#BEGIN {$ENV{EVENT_REACTOR_DEBUG} = 1};

use JSON;
use ReAnimator;
use Terminal;

$SIG{INT} = $SIG{TERM} = sub { exit 0 };

my $server = ReAnimator->new;

ReAnimator->new(
    on_accept => sub {
        my ($self, $client) = @_;

        my $terminal = Terminal->new(
            cmd            => '/bin/sh',
            on_row_changed => sub {
                my ($self, $row, $text) = @_;

                $client->send_message(
                    JSON->new->encode(
                        {type => 'row', row => $row, text => $text}
                    )
                );
                warn 'row changed';
            },
            on_finished => sub {
                warn 'terminal is closed';
                $self->drop($client);
            }
        );

        $self->event_reactor->add_atom($terminal);

        $terminal->start;

        $client->on_message(
            sub {
                my ($client, $message) = @_;

                #warn "Message from client $message" if DEBUG;

                my $json = JSON->new;

                eval { $message = $json->decode($message); };
                return if !$message || $@;

                my $type = $message->{type};
                if ($type eq 'key') {
                    my $buffer;

                    my $code = $message->{code};

                    warn "code=$code";

                    $terminal->key($code);
                }
                elsif ($type eq 'action') {
                }
                else {
                    warn "Unknown type '$type'";
                }

            }
        );
    }
)->listen->start;
